generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Content {
  id                            String             @id @default(cuid())
  title                         String
  content                       String
  status                        ContentStatus      @default(DRAFT)
  wordCount                     Int                @default(0)
  readingTime                   Int                @default(0)
  tags                          String[]
  category                      String?
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime
  authorId                      String
  approvedAt                    DateTime?
  rejectedAt                    DateTime?
  reviewFeedback                String?
  reviewedAt                    DateTime?
  reviewerId                    String?
  submittedAt                   DateTime?
  rejectionCount                Int                @default(0)
  version                       Int                @default(1)
  contentType                   ContentType        @default(LECTURE_NOTE)
  difficulty                    String?
  section                       Section?
  course                        String?
  User_Content_authorIdToUser   User               @relation("Content_authorIdToUser", fields: [authorId], references: [id])
  User_Content_reviewerIdToUser User?              @relation("Content_reviewerIdToUser", fields: [reviewerId], references: [id])
  ContentAssignment             ContentAssignment?
  ContentVersion                ContentVersion[]
  ValidationResult              ValidationResult[]
}

model ContentAssignment {
  id                                        String      @id @default(cuid())
  topic                                     String
  guidelines                                String?
  dueDate                                   DateTime?
  status                                    String      @default("ASSIGNED")
  assignedById                              String
  assignedToId                              String
  contentId                                 String?     @unique
  createdAt                                 DateTime    @default(now())
  updatedAt                                 DateTime
  contentType                               ContentType @default(LECTURE_NOTE)
  difficulty                                String?
  topicsTaughtSoFar                         String[]
  section                                   Section?
  course                                    String?
  User_ContentAssignment_assignedByIdToUser User        @relation("ContentAssignment_assignedByIdToUser", fields: [assignedById], references: [id])
  User_ContentAssignment_assignedToIdToUser User        @relation("ContentAssignment_assignedToIdToUser", fields: [assignedToId], references: [id])
  Content                                   Content?    @relation(fields: [contentId], references: [id])
}

model ContentVersion {
  id        String   @id @default(cuid())
  contentId String
  title     String
  content   String
  createdAt DateTime @default(now())
  Content   Content  @relation(fields: [contentId], references: [id])
}

model Guideline {
  id          String   @id @default(cuid())
  name        String
  description String?
  criteria    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  createdById String
  User        User     @relation(fields: [createdById], references: [id])
}

model GuidelinesTemplate {
  id          String      @id @default(cuid())
  name        String      @unique
  contentType ContentType
  guidelines  String
  version     Int         @default(1)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  createdById String
  User        User        @relation(fields: [createdById], references: [id])
}

model LLMConfiguration {
  id          String      @id @default(cuid())
  provider    LLMProvider
  modelName   String
  isActive    Boolean     @default(true)
  priority    Int         @default(1)
  temperature Float       @default(0.0)
  maxTokens   Int?
  apiEndpoint String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  createdById String
  User        User        @relation(fields: [createdById], references: [id])
}

model PromptTemplate {
  id          String      @id @default(cuid())
  name        String      @unique
  contentType ContentType
  prompt      String
  version     Int         @default(1)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  createdById String
  User        User        @relation(fields: [createdById], references: [id])
}

model User {
  id                                                     String               @id @default(cuid())
  email                                                  String               @unique
  name                                                   String
  role                                                   Role                 @default(CREATOR)
  createdAt                                              DateTime             @default(now())
  lastLogin                                              DateTime?
  passwordHash                                           String
  contactNumber                                          String?
  courseAssigned                                         String[]             @default([])
  isActive                                               Boolean              @default(true)
  assignedAdminId                                        String[]             @default([])
  AuditLog                                               AuditLog[]
  Content_Content_authorIdToUser                         Content[]            @relation("Content_authorIdToUser")
  Content_Content_reviewerIdToUser                       Content[]            @relation("Content_reviewerIdToUser")
  ContentAssignment_ContentAssignment_assignedByIdToUser ContentAssignment[]  @relation("ContentAssignment_assignedByIdToUser")
  ContentAssignment_ContentAssignment_assignedToIdToUser ContentAssignment[]  @relation("ContentAssignment_assignedToIdToUser")
  Guideline                                              Guideline[]
  GuidelinesTemplate                                     GuidelinesTemplate[]
  LLMConfiguration                                       LLMConfiguration[]
  PromptTemplate                                         PromptTemplate[]
  UserSession                                            UserSession[]
}

model UserSession {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?
  User      User      @relation(fields: [userId], references: [id])
}

model ValidationResult {
  id               String      @id @default(cuid())
  contentId        String
  llmProvider      LLMProvider
  modelVersion     String
  criteria         Json
  overallScore     Float
  processingTimeMs Int
  createdAt        DateTime    @default(now())
  Content          Content     @relation(fields: [contentId], references: [id])
}

enum ContentStatus {
  DRAFT
  VALIDATING
  REVIEW
  APPROVED
  REJECTED
}

enum ContentType {
  PRE_READ
  ASSIGNMENT
  LECTURE_NOTE
}

enum LLMProvider {
  OPENAI
  ANTHROPIC
  LOCAL
}

enum Role {
  CREATOR
  ADMIN
  SUPER_ADMIN
}

enum Section {
  PRE_ORDER
  IN_ORDER
  POST_ORDER
}
